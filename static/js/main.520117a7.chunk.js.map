{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","mode","max_digit","min_digit","list","number","answerja","answeren","modeChange","bind","min_digit_Change","max_digit_Change","event","this","setState","target","value","min","Number","max","digit","Math","floor","random","push","i","num","join","jadigit","ja_answer_list","length","unshift","endigit","en_answer_list","className","onChange","onClick","handleUpdate","handleAnswer","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gKAAAA,EAAOC,QAAU,IAA0B,kC,qIC8N5BC,G,8DAzNb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,SACNC,UAAW,EACXC,UAAW,EACXC,KAAM,GACNC,OAAQ,EACRC,SAAU,uIACVC,SAAU,kIAGZ,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBACxB,EAAKE,iBAAmB,EAAKA,iBAAiBF,KAAtB,gBAdP,E,uDAiBRG,GACTC,KAAKC,SAAS,CAAEb,KAAMW,EAAMG,OAAOC,U,uCAEpBJ,GACfC,KAAKC,SAAS,CAAEX,UAAWS,EAAMG,OAAOC,U,uCAEzBJ,GACfC,KAAKC,SAAS,CAAEZ,UAAWU,EAAMG,OAAOC,U,mCAG7BJ,GACX,IAAIK,EAAMC,OAAOL,KAAKb,MAAMG,WACxBgB,EAAMD,OAAOL,KAAKb,MAAME,WAC5B,GAAIe,GAAOE,EAAK,CACd,IAAIC,EAAQC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAM,EAAIF,IAAQA,EACtDb,EAAO,GACXA,EAAKoB,KAAKH,KAAKC,MAAM,EAAAD,KAAKE,UAAsB,GAChD,IAAK,IAAIE,EAAI,EAAGA,EAAIL,EAAQ,EAAGK,IAC7BrB,EAAKoB,KAAKH,KAAKC,MAAsB,EAAhBD,KAAKE,WAE5B,IAAIG,EAAMR,OAAOd,EAAKuB,KAAK,KAC3Bd,KAAKC,SAAS,CACZV,KAAMA,EACNC,OAAQqB,EACRpB,SAAU,uIACVC,SAAU,wIAIZM,KAAKC,SAAS,CACZT,OAAQ,uIACRD,KAAM,GACNE,SAAU,uIACVC,SAAU,qI,mCAQHK,GAoBX,IAlBA,IAAIgB,EAAU,CACZ,GACA,GACA,GACA,GACA,GACA,SACA,GACA,GACA,GACA,SACA,GACA,GACA,GACA,UAEEC,EAAiB,GAEZJ,EAAI,EAAGZ,KAAKb,MAAMI,KAAK0B,QAAUL,EAAGA,IAC3CI,EAAeE,QAAQH,EAAQH,IAC/BI,EAAeE,QAAQlB,KAAKb,MAAMI,KAAKS,KAAKb,MAAMI,KAAK0B,OAASL,IAsBlE,IAlBA,IAAIO,EAAU,CACZ,GACA,GACA,GACA,GACA,WACA,GACA,GACA,UACA,GACA,GACA,UACA,GACA,GACA,YAEEC,EAAiB,GAEZR,EAAI,EAAGZ,KAAKb,MAAMI,KAAK0B,QAAUL,EAAGA,IAC3CQ,EAAeF,QAAQC,EAAQP,IAC/BQ,EAAeF,QAAQlB,KAAKb,MAAMI,KAAKS,KAAKb,MAAMI,KAAK0B,OAASL,IAIlEZ,KAAKC,SAAS,CACZP,SAAUsB,EAAeF,KAAK,IAC9BrB,SAAU2B,EAAeN,KAAK,Q,+BAIxB,IAAD,OACP,OACE,yBAAKO,UAAU,gBAEb,8GAGA,yBAAKA,UAAU,YAEb,yBAAKA,UAAU,QACb,kDACA,8BACE,4BAAQlB,MAAOH,KAAKb,MAAMgB,MAAOmB,SAAUtB,KAAKL,YAC9C,4BAAQQ,MAAM,UAAd,UACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,WAAd,YACA,4BAAQA,MAAM,eAAd,kBAMN,yBAAKkB,UAAU,aACb,wDACA,8BACE,4BACElB,MAAOH,KAAKb,MAAMG,UAClBgC,SAAUtB,KAAKH,kBAEf,4BAAQM,MAAM,KAAd,cACA,4BAAQA,MAAM,KAAd,eACA,4BAAQA,MAAM,KAAd,iBACA,4BAAQA,MAAM,KAAd,kBACA,4BAAQA,MAAM,KAAd,mBACA,4BAAQA,MAAM,MAAd,sBACA,4BAAQA,MAAM,MAAd,uBACA,4BAAQA,MAAM,MAAd,wBACA,4BAAQA,MAAM,MAAd,0BACA,4BAAQA,MAAM,MAAd,2BACA,4BAAQA,MAAM,MAAd,+BAMN,yBAAKkB,UAAU,aACb,wDACA,8BACE,4BACElB,MAAOH,KAAKb,MAAME,UAClBiC,SAAUtB,KAAKF,kBAEf,4BAAQK,MAAM,KAAd,eACA,4BAAQA,MAAM,KAAd,iBACA,4BAAQA,MAAM,KAAd,kBACA,4BAAQA,MAAM,KAAd,mBACA,4BAAQA,MAAM,MAAd,sBACA,4BAAQA,MAAM,MAAd,uBACA,4BAAQA,MAAM,MAAd,wBACA,4BAAQA,MAAM,MAAd,0BACA,4BAAQA,MAAM,MAAd,2BACA,4BAAQA,MAAM,MAAd,4BACA,4BAAQA,MAAM,MAAd,iCAOR,4BACEoB,QAAS,WACP,EAAKC,gBAEPH,UAAU,UAJZ,4BAUA,yBAAKA,UAAU,UACb,4BAAKrB,KAAKb,MAAMK,SAIlB,4BACE+B,QAAS,WACP,EAAKE,gBAEPJ,UAAU,cAJZ,kCAUA,yBAAKA,UAAU,UACb,4BAAKrB,KAAKb,MAAMO,UAChB,4BAAKM,KAAKb,MAAMM,gB,GAnNRiC,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAQ,kBAAE,EAAF,MAAYC,SAASC,eAAe,SD6H/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.520117a7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport styles from \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mode: \"normal\",\n      max_digit: 6,\n      min_digit: 5,\n      list: [],\n      number: 0,\n      answerja: \"ボタンを押すと日本語読みの答えが表示されます\",\n      answeren: \"ボタンを押すと英語読みの答えが表示されます\",\n    };\n\n    this.modeChange = this.modeChange.bind(this);\n    this.min_digit_Change = this.min_digit_Change.bind(this);\n    this.max_digit_Change = this.max_digit_Change.bind(this);\n  }\n\n  modeChange(event) {\n    this.setState({ mode: event.target.value });\n  }\n  min_digit_Change(event) {\n    this.setState({ min_digit: event.target.value });\n  }\n  max_digit_Change(event) {\n    this.setState({ max_digit: event.target.value });\n  }\n\n  handleUpdate(event) {\n    var min = Number(this.state.min_digit);\n    var max = Number(this.state.max_digit);\n    if (min <= max) {\n      var digit = Math.floor(Math.random() * (max + 1 - min)) + min;\n      var list = [];\n      list.push(Math.floor(Math.random() * (9 - 1)) + 1);\n      for (var i = 0; i < digit - 1; i++) {\n        list.push(Math.floor(Math.random() * 9));\n      }\n      var num = Number(list.join(\"\"));\n      this.setState({\n        list: list,\n        number: num,\n        answerja: \"ボタンを押すと日本語読みの答えが表示されます\",\n        answeren: \"ボタンを押すと英語読みの答えが表示されます\",\n      });\n    } else {\n      /*error message*/\n      this.setState({\n        number: \"最小桁数は最大桁数より小さい値にしてください\",\n        list: [],\n        answerja: \"ボタンを押すと日本語読みの答えが表示されます\",\n        answeren: \"ボタンを押すと英語読みの答えが表示されます\",\n      });\n    }\n\n    /*\n    console.log(\"You chose: \" +this.state.mode +\" \" +this.state.min_digit +\" \" +this.state.max_digit +\" \" +this.state.number);*/\n  }\n\n  handleAnswer(event) {\n    /*日本語読みの答え*/\n    var jadigit = [\n      \"\",\n      \"\",\n      \"\",\n      \"\",\n      \"\",\n      \"万\",\n      \"\",\n      \"\",\n      \"\",\n      \"億\",\n      \"\",\n      \"\",\n      \"\",\n      \"兆\",\n    ];\n    var ja_answer_list = [];\n\n    for (let i = 1; this.state.list.length >= i; i++) {\n      ja_answer_list.unshift(jadigit[i]);\n      ja_answer_list.unshift(this.state.list[this.state.list.length - i]);\n    }\n\n    /*英語読みの答え */\n    var endigit = [\n      \"\",\n      \"\",\n      \"\",\n      \"\",\n      \"thousand\",\n      \"\",\n      \"\",\n      \"million\",\n      \"\",\n      \"\",\n      \"billion\",\n      \"\",\n      \"\",\n      \"trillion\",\n    ];\n    var en_answer_list = [];\n\n    for (let i = 1; this.state.list.length >= i; i++) {\n      en_answer_list.unshift(endigit[i]);\n      en_answer_list.unshift(this.state.list[this.state.list.length - i]);\n    }\n\n    /*setState*/\n    this.setState({\n      answeren: ja_answer_list.join(\"\"),\n      answerja: en_answer_list.join(\"\"),\n    });\n  }\n\n  render() {\n    return (\n      <div className='main_content'>\n        {/*タイトル*/}\n        <h2>大きい桁の数字に強くなろう</h2>\n\n        {/*設定 */}\n        <div className='settings'>\n          {/*モード*/}\n          <div className='mode'>\n            <h3>モード</h3>\n            <form>\n              <select value={this.state.value} onChange={this.modeChange}>\n                <option value='normal'>Normal</option>\n                <option value='multiply'>Multiply</option>\n                <option value='addtion'>Addition</option>\n                <option value='subtraction'>Subtraction</option>\n              </select>\n            </form>\n          </div>\n\n          {/*最小桁数設定フォーム*/}\n          <div className='min_digit'>\n            <h3>最小桁数</h3>\n            <form>\n              <select\n                value={this.state.min_digit}\n                onChange={this.min_digit_Change}\n              >\n                <option value='5'>5 (10,000)</option>\n                <option value='6'>6 (100,000)</option>\n                <option value='7'>7 (1,000,000)</option>\n                <option value='8'>8 (10,000,000)</option>\n                <option value='9'>9 (100,000,000)</option>\n                <option value='10'>10 (1,000,000,000)</option>\n                <option value='11'>11 (10,000,000,000)</option>\n                <option value='12'>12 (100,000,000,000)</option>\n                <option value='13'>13 (1,000,000,000,000)</option>\n                <option value='14'>14 (10,000,000,000,000)</option>\n                <option value='15'>15 (100,000,000,000,000)</option>\n              </select>\n            </form>\n          </div>\n\n          {/*最大桁数設定フォーム*/}\n          <div className='max_digit'>\n            <h3>最大桁数</h3>\n            <form>\n              <select\n                value={this.state.max_digit}\n                onChange={this.max_digit_Change}\n              >\n                <option value='6'>6 (100,000)</option>\n                <option value='7'>7 (1,000,000)</option>\n                <option value='8'>8 (10,000,000)</option>\n                <option value='9'>9 (100,000,000)</option>\n                <option value='10'>10 (1,000,000,000)</option>\n                <option value='11'>11 (10,000,000,000)</option>\n                <option value='12'>12 (100,000,000,000)</option>\n                <option value='13'>13 (1,000,000,000,000)</option>\n                <option value='14'>14 (10,000,000,000,000)</option>\n                <option value='15'>15 (100,000,000,000,000)</option>\n                <option value='16'>16 (1000,000,000,000,000)</option>\n              </select>\n            </form>\n          </div>\n        </div>\n\n        {/*値更新ボタン*/}\n        <button\n          onClick={() => {\n            this.handleUpdate();\n          }}\n          className='update'\n        >\n          値を更新\n        </button>\n\n        {/*大きい桁の数の表示場所*/}\n        <div className='number'>\n          <h4>{this.state.number}</h4>\n        </div>\n\n        {/*答えを表示させるボタン*/}\n        <button\n          onClick={() => {\n            this.handleAnswer();\n          }}\n          className='answer_btn'\n        >\n          答えを表示\n        </button>\n\n        {/*答え*/}\n        <div className='answer'>\n          <h4>{this.state.answeren}</h4>\n          <h4>{this.state.answerja}</h4>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}